====	 Reading File 	====
====	 Tokenizing 	====

(TokenType.ROUTE: route)
(TokenType.IDENTIFIER: HelloWorld)
(TokenType.LPAREN: ()
(TokenType.IDENTIFIER: bob)
(TokenType.COLON: :)
(TokenType.BOOL: bool)
(TokenType.COMMA: ,)
(TokenType.IDENTIFIER: tina)
(TokenType.COLON: :)
(TokenType.CHAR: char)
(TokenType.RPAREN: ))
(TokenType.COLON: :)
(TokenType.INT: int)
(TokenType.BEGIN: {)
(TokenType.RETURN: return)
(TokenType.LPAREN: ()
(TokenType.IDENTIFIER: a)
(TokenType.ADD: +)
(TokenType.INT_LITERAL: 1)
(TokenType.RPAREN: ))
(TokenType.MULTIPLY: *)
(TokenType.LPAREN: ()
(TokenType.INT_LITERAL: 4)
(TokenType.SUBTRACT: -)
(TokenType.INT_LITERAL: 1)
(TokenType.RPAREN: ))
(TokenType.SEMICOLON: ;)
(TokenType.END: })

====	 Parsing 	====

0 Executing - ParseCmd
1 Executing - RouteCmd
Eating - Token(token_type=TokenType.ROUTE, lexeme=route)
Eating - Token(token_type=TokenType.IDENTIFIER, lexeme=HelloWorld)
Eating - Token(token_type=TokenType.LPAREN, lexeme=()
2 Executing - ParameterListCmd
Eating - Token(token_type=TokenType.IDENTIFIER, lexeme=bob)
Eating - Token(token_type=TokenType.COLON, lexeme=:)
Eating - Token(token_type=TokenType.BOOL, lexeme=bool)
Eating - Token(token_type=TokenType.COMMA, lexeme=,)
Eating - Token(token_type=TokenType.IDENTIFIER, lexeme=tina)
Eating - Token(token_type=TokenType.COLON, lexeme=:)
Eating - Token(token_type=TokenType.CHAR, lexeme=char)
2 Completed - ParameterListCmd
Eating - Token(token_type=TokenType.RPAREN, lexeme=))
Eating - Token(token_type=TokenType.COLON, lexeme=:)
Eating - Token(token_type=TokenType.INT, lexeme=int)
Eating - Token(token_type=TokenType.BEGIN, lexeme={)
2 Executing - StatementListCmd
3 Executing - ReturnCmd
Eating - Token(token_type=TokenType.RETURN, lexeme=return)
4 Executing - ExpressionCmd
D
Eating - Token(token_type=TokenType.LPAREN, lexeme=()
5 Executing - ExpressionCmd
E
6 Executing - TermCmd
Eating - Token(token_type=TokenType.IDENTIFIER, lexeme=a)
6 Completed - TermCmd
Eating - Token(token_type=TokenType.ADD, lexeme=+)
6 Executing - ExpressionCmd
B
7 Executing - TermCmd
Eating - Token(token_type=TokenType.INT_LITERAL, lexeme=1)
7 Completed - TermCmd
6 Completed - ExpressionCmd
Done E
5 Completed - ExpressionCmd
Eating - Token(token_type=TokenType.RPAREN, lexeme=))
Done D
4 Completed - ExpressionCmd
